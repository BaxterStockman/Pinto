#!/usr/bin/perl

# ABSTRACT: administer a Pinto repository
# PODNAME: pinto-admin

use strict;
use warnings;

#-----------------------------------------------------------------------------

# VERSION

#-----------------------------------------------------------------------------

use App::Pinto::Admin;
exit App::Pinto::Admin->run();

#-----------------------------------------------------------------------------

__END__

=head1 SYNOPSIS

  pinto-admin [global options] COMMAND [command options] [ARGS]

  pinto-admin help COMMAND

  pinto-admin help

=head1 TYPICAL USAGE

  # Create an empty repository
  $> pinto-admin --local=/some/dir create

  # Add your own distribution to the repository
  $> pinto-admin --local=/some/dir add /path/to/Foo-Bar-1.2.tar.gz

  # Then install stuff from your repository
  $> cpanm --mirror-only --mirror file:///some/dir Foo::Bar

=head1 DESCRIPTION

C<pinto-admin> is a command line utility for managing a Pinto
repository.  The repository can contain your own distributions and/or
mirror distributions from another repository (such as
L<http://cpan.perl.org>).  You can also put patched versions of
mirrored distributions in your repository.

You can then point L<cpanm> to your Pinto repository and build and
install your distributions (and their dependencies).  B<NOTE:> At this
time, only L<cpanm> will work properly with a Pinto repository.  But
support for L<cpan> and L<cpanp> is coming real soon!

=head1 CONFIGURATION

The following parameters can be set in your configuration file.  The
default location of this file is F<~/.pinto/config.ini>.  You may
specify an alternative location for this file by setting the
C<PERL_PINTO> environment variable to point to another path.

The configuration file is in the typical INI format.  Parameters are
C<NAME = VALUE> pairs.  Global parameters (which are all the ones
described below) are at the top of the file. Blank lines are ignored,
leading and trailing whitespace is discarded.  Comments start with a
semi-colon (;).

A configuration file is usually not mandatory.  Almost all
configuration parameters can also be specified on the command line,
either as global options or command options.

=over 4

=item author = NAME

Your identity as a module author.  This could be your PAUSE ID, but it
doesn't have to be.  As long as it is just alphanumeric characters
with no spaces.  This defaults to your shell username (either
C<$ENV{USERNAME}> or C<$ENV{USER}> or C<$ENV{LOGNAME}>).  This
parameter is only relevant to the C<add> and C<remove> commands.

If you have a team of developers and you want them all to be able
to add/remove the same packages to the repository, then everyone
on the team should use the same C<author> parameter.

=item local = DIRECTORY

The path to a directory where your Pinto repository will be kept.
This parameter is required for all commands.  You must be able to read
and write to this directory, but it doesn't have to already exist.
You may use a tilde (~) as shorthand for your home directory.

=item source = URL

The URL of a repository that you would like L<Pinto> to pull foreign
distributions from.  This could be a public CPAN mirror, or another
Pinto repository.  Defaults to L<http://cpan.perl.org>.  This
parameter is only relevant to the C<mirror> command.

=item nocleanup = 0|1

If true, L<Pinto> will not automatically delete distributions that
become out of date (either because you've added your own local version
or you've pulled a newer one from a remote repository).  The default
is 0, which means you won't be able to install older versions of a
distribution from your repository.  But if you set <nocleanup> to 1,
then you can still get older distributions in the usual way:

  $> cpanm A/AU/AUTHOR/Older-Dist-1.2.tar gz

=item nocommit = 0|1

If true, L<Pinto> will not commit changes in the repository to your
VCS at the end of each command.  If you're not using a VCS store, then
this parameter has no effect.  The default is 0.

=item noinit = 0|1

If true, L<Pinto> assumes tha the working copy of your repository is
up-to-date and will not pull/update the repository from your VCS at
the beginning of each command.  This can save a lot of time, but use
with caution. If you're not using a VCS store, then this parameter has
no effect.  The default is 0.

=item notag = 0|1

If true, L<Pinto> will not make a tag in your VCS after committing
changes, even if you've configured a tag name.  If you're not using a
VCS store, then this parameter has no effect.  The default is 0.

=item quiet = 0|1

If true, then only fatal error messages will be displayed.  This
parameter silently overrides any C<verbose> setting.

=item store = CLASS_NAME

The name of the class that will handle storage of your Pinto
repository.  The default is L<Pinto::Store>, which only stores your
repository on the local file system.  Alternatives like
L<Pinto::Store::Svn> and L<Pinto::Store::Git> allow you to store your
repository inside a version control system (VCS).  See the
documentation for each of those modules for additional configuration
settings.

=item verbose = 0|1|2

Controls how much noise is made.  Default is 0.  A higher number means
more diagnostic output.

=back


=head1 COMMANDS

The following commands are available.  Say C<pinto-admin help COMMAND>
to display a list of sub-options available for that C<COMMAND>.

=over 4

=item add path/to/Some-Distribution-1.2.tar.gz

Adds the given distribution to the Pinto repository.  I call these
"local distributions".  Any packages contained in that distribution
will mask the foreign packages with the same name.  See the
L<"BEHAVIOR"> section for more information about how local
distributions interact with foreign ones.

Note that you can also pipe arguments to this command over STDIN.  In
that case, blank lines and lines that look like comments will be
ignored.

=item clean

Deletes any distribution in the repository that is not currently in
the master index.  This usually happens automatically, unless you've
set the C<nocleanup> parameter.  If you had set C<nocleanup>, beware
that running the C<clean> command will make it impossible to install
older distributions from your repository, and the only way to get them
back is to manually add them again (or rollback, if using VCS).

=item create

Creates a new, empty repository at the configured directory.  The
directory does not need to already exist, and you'll get a warning
if it does.

=item list

Lists all the packages and distributions that are currently indexed in
your remote repository.  This is basically just the contents of the
F<02packages.details.txt.gz> file.

=item remove Some::Package

Removes the local distribution that contains the given package.  All
other packages that were contained in the same distribution are also
removed.  You can only remove a package that B<YOU> have added.  You
cannot remove packages in foreign distributions that were pulled in
from a remote source (however you can mask them by adding your own
versions).

Note that you can also pipe arguments to this command over STDIN.  In
that case, blank lines and lines that look like comments will be
ignored.

=item mirror

Fills your repository with the distributions that contain the latest
version of all packages in the C<source> repository.  I call these
"foreign" distributions.  See the L<"BEHAVIOR"> section for more
information about how local distributions interact with foreign ones.

=item verify

Reports any distributions that are listed in your index but not
actually present in the repository.  This is usually a sign that
something has gone wrong.

=back

=head1 BEHAVIOR

There are certain rules that govern how a Pinto repository behaves.
These rules are intended to ensure that clients installing
distributions from your repository will always get the B<right ones>,
regardless of what happens on the public CPAN or what order they
install things.  Also, the rules attempt to make Pinto behave somewhat
like PAUSE does.

=over 4

=item A local package always masks a foreign package, and all other
packages that are in the same distribution with the foreign package.

This is important, so pay attention.  If you C<mirror> or C<add> a
distribution that contains both C<Foo> and C<Bar> packages, and you
C<add> another distribution that contains just the C<Foo> package,
then both the C<Foo> and C<Bar> packages from the prior distribution
will be removed from your index.  This ensures that anyone installing
packages from your repository will always get B<your latest> version of
C<Foo>.  But they'll never be able to get C<Bar>, because doing so
would leave them with the older C<Foo>.

=item You can never add a distribution with the same name twice.

Most distribution-building tools will put some kind of version number
in the name of the distribution, so this is rarely a problem.  The
"name" of a distribution is actually a function of the name of the
file and the name of the author.  So technically, it is possible for
two different authors to both add a distribution called
F<Foo-Bar-1.2.tar.gz>.  But in practice, this almost never happens
because...

=item Only the original author of a local package can add a
distribution that contains the same package.

Ownership is given on a first-come basis, just like PAUSE.  So if
C<SALLY> is the first author to add a distribution to the repository
with package C<Foo::Bar>, then only C<SALLY> can ever add another
distribution with that package again.  Unless that package is
explicitly removed, but...

=item Only the original author of a local package can remove it.

Just like when adding new versions of a local package, only the
original author can remove it.  Yes, you can just change the C<author>
parameter in your configuration, but C<SALLY> probably wouldn't
appreciate you messing with her releases (unless C<SALLY> no longer
works here).

So if you're working as part of a team and everyone is allowed to
make releases of the same packages, then conisder having everyone
use the same C<author> parameter.

=back

=head1 SAMPLE CONFIGURAION

The following is a sample configuration file, showing all the
parameters that L<pinto-admin> supports directly.  Note that all the
parameters are commented out.  So if you use this sample as the basis
for your own configuration, then you may need to uncomment and adjust
accordingly.

Plugins like L<Pinto::Store::Svn> and L<Pinto::Store::Svn> may have
additional parameters.  L<pinto-remote> and L<pinto-server> also use
this same configuration file, and may require additional parameters of
their own.

  ; Directory where Pinto repository will live.  No default
  ; local = ~/srv/PINTO

  ; URL of a CPAN mirror. Defaults to http://cpan.perl.org
  ; source = http://some-cpan-mirror.com

  ; Your author ID.  Alphanumeric only.  Defaults to your username
  ; author = MYNAME

  ; Class to use for back-end storage. Defaults to Pinto::Store
  ; store = Pinto::Store::Svn

  ; Do not remove distributions that become out of date. Defaults to 0
  ; nocleanup = 0

  ; Do not commit changes to CS after each action.  Defaults to 0
  ; nocommit = 0

  ; Do not checkout/update the repository before every operation. Defaults to 0
  ; noinit = 0

  ; Do not make a tag after committing to VCS.  Defaults to 0
  ; notag = 0

  ; Only display fatal error messages.  Default is 0
  ; quiet = 0

  ; Show more diagnostic output (0|1|2|).  Default is 0
  ; verbose = 0

=cut

